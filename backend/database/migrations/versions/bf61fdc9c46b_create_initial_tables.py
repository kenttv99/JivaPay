"""create_initial_tables

Revision ID: bf61fdc9c46b
Revises: 
Create Date: 2025-05-10 00:24:55.764855

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'bf61fdc9c46b'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('configuration_settings',
    sa.Column('key', sa.String(length=255), nullable=False, comment='Unique key identifying the configuration setting'),
    sa.Column('value', sa.Text(), nullable=False, comment='Value of the configuration setting (stored as text)'),
    sa.Column('description', sa.Text(), nullable=True, comment='Description of the setting for administrators'),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False, comment='Timestamp of creation'),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=True, comment='Timestamp of last update'),
    sa.PrimaryKeyConstraint('key')
    )
    op.create_index(op.f('ix_configuration_settings_key'), 'configuration_settings', ['key'], unique=False)
    op.create_table('countries',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('country_name', sa.String(length=100), nullable=False),
    sa.Column('country_code_iso', sa.String(length=2), nullable=False),
    sa.Column('public_name', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('access', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('country_code_iso'),
    sa.UniqueConstraint('country_name')
    )
    op.create_index(op.f('ix_countries_id'), 'countries', ['id'], unique=False)
    op.create_table('crypto_currencies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('currency_name', sa.String(length=50), nullable=False),
    sa.Column('currency_code', sa.String(length=10), nullable=False),
    sa.Column('public_name', sa.String(length=255), nullable=True),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('access', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('currency_code'),
    sa.UniqueConstraint('currency_name')
    )
    op.create_index(op.f('ix_crypto_currencies_id'), 'crypto_currencies', ['id'], unique=False)
    op.create_table('owner_of_requisites',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('fio', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_owner_of_requisites_id'), 'owner_of_requisites', ['id'], unique=False)
    op.create_table('requisite_distribution_settings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('strategy', sa.String(length=50), nullable=False),
    sa.Column('params', sa.JSON(), nullable=True),
    sa.Column('scope', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.String(length=255), nullable=True),
    sa.Column('applies_to', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.Text(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_role_id'), 'users', ['role_id'], unique=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('ip_address', sa.String(length=100), nullable=True),
    sa.Column('action', sa.String(length=255), nullable=False),
    sa.Column('target_entity', sa.String(length=100), nullable=True),
    sa.Column('target_id', sa.Integer(), nullable=True),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='fk_audit_user_id'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_logs_action'), 'audit_logs', ['action'], unique=False)
    op.create_index('ix_audit_logs_target', 'audit_logs', ['target_entity', 'target_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_timestamp'), 'audit_logs', ['timestamp'], unique=False)
    op.create_table('trader_commissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('trader_id', sa.Integer(), nullable=False),
    sa.Column('commission_payin', sa.DECIMAL(precision=20, scale=2), nullable=False),
    sa.Column('commission_payout', sa.DECIMAL(precision=20, scale=2), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['trader_id'], ['traders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_trader_commissions_id'), 'trader_commissions', ['id'], unique=False)
    op.create_table('full_requisites_settings',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('requisite_id', sa.Integer(), nullable=False),
    sa.Column('pay_in', sa.Boolean(), nullable=False),
    sa.Column('pay_out', sa.Boolean(), nullable=False),
    sa.Column('lower_limit', sa.DECIMAL(precision=20, scale=2), nullable=False),
    sa.Column('upper_limit', sa.DECIMAL(precision=20, scale=2), nullable=False),
    sa.Column('total_limit', sa.DECIMAL(precision=20, scale=2), nullable=False),
    sa.Column('turnover_limit_minutes', sa.Integer(), nullable=False),
    sa.Column('turnover_day_max', sa.DECIMAL(precision=20, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['requisite_id'], ['req_traders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('requisite_id')
    )
    op.create_index(op.f('ix_full_requisites_settings_id'), 'full_requisites_settings', ['id'], unique=False)
    op.create_table('store_commissions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('store_id', sa.Integer(), nullable=False),
    sa.Column('commission_payin', sa.DECIMAL(precision=20, scale=2), nullable=False),
    sa.Column('commission_payout', sa.DECIMAL(precision=20, scale=2), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['store_id'], ['merchant_stores.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_store_commissions_id'), 'store_commissions', ['id'], unique=False)
    op.create_table('incoming_orders',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('merchant_id', sa.Integer(), nullable=False),
    sa.Column('store_id', sa.Integer(), nullable=False),
    sa.Column('gateway_id', sa.Integer(), nullable=True),
    sa.Column('target_method_id', sa.Integer(), nullable=True),
    sa.Column('target_bank_id', sa.Integer(), nullable=True),
    sa.Column('fiat_currency_id', sa.Integer(), nullable=False),
    sa.Column('crypto_currency_id', sa.Integer(), nullable=False),
    sa.Column('amount_fiat', sa.DECIMAL(precision=20, scale=2), nullable=True),
    sa.Column('amount_crypto', sa.DECIMAL(precision=20, scale=8), nullable=True),
    sa.Column('exchange_rate', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('store_commission', sa.DECIMAL(precision=20, scale=2), nullable=False),
    sa.Column('order_type', sa.String(length=50), nullable=False),
    sa.Column('customer_id', sa.String(length=255), nullable=True),
    sa.Column('customer_ip', sa.String(length=100), nullable=True),
    sa.Column('return_url', sa.String(length=512), nullable=True),
    sa.Column('callback_url', sa.String(length=512), nullable=True),
    sa.Column('client_id', sa.String(length=255), nullable=True),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('last_attempt_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('failure_reason', sa.Text(), nullable=True),
    sa.Column('payment_details_submitted', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['crypto_currency_id'], ['crypto_currencies.id'], ),
    sa.ForeignKeyConstraint(['fiat_currency_id'], ['fiat_currencies.id'], ),
    sa.ForeignKeyConstraint(['gateway_id'], ['store_gateways.id'], ),
    sa.ForeignKeyConstraint(['merchant_id'], ['merchants.id'], ),
    sa.ForeignKeyConstraint(['store_id'], ['merchant_stores.id'], ),
    sa.ForeignKeyConstraint(['target_bank_id'], ['banks.id'], ),
    sa.ForeignKeyConstraint(['target_method_id'], ['payment_methods.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_incoming_orders_client_id'), 'incoming_orders', ['client_id'], unique=False)
    op.create_index(op.f('ix_incoming_orders_id'), 'incoming_orders', ['id'], unique=False)
    op.create_index('ix_incoming_orders_merchant_store', 'incoming_orders', ['merchant_id', 'store_id'], unique=False)
    op.create_index(op.f('ix_incoming_orders_order_type'), 'incoming_orders', ['order_type'], unique=False)
    op.create_index(op.f('ix_incoming_orders_status'), 'incoming_orders', ['status'], unique=False)
    op.create_index('ix_incoming_orders_status_created', 'incoming_orders', ['status', 'created_at'], unique=False)
    op.create_table('balance_store_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('store_id', sa.Integer(), nullable=False),
    sa.Column('crypto_currency_id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=True),
    sa.Column('balance_change', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('new_balance', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('operation_type', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['crypto_currency_id'], ['crypto_currencies.id'], ),
    sa.ForeignKeyConstraint(['order_id'], ['order_history.id'], ),
    sa.ForeignKeyConstraint(['store_id'], ['merchant_stores.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_balance_store_history_id'), 'balance_store_history', ['id'], unique=False)
    op.create_index(op.f('ix_balance_store_history_operation_type'), 'balance_store_history', ['operation_type'], unique=False)
    op.create_table('balance_trader_crypto_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('trader_id', sa.Integer(), nullable=False),
    sa.Column('crypto_currency_id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=True),
    sa.Column('operation_type', sa.String(length=50), nullable=False),
    sa.Column('network', sa.String(length=50), nullable=False),
    sa.Column('balance_change', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('new_balance', sa.DECIMAL(precision=20, scale=8), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['crypto_currency_id'], ['crypto_currencies.id'], ),
    sa.ForeignKeyConstraint(['order_id'], ['order_history.id'], ),
    sa.ForeignKeyConstraint(['trader_id'], ['traders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_balance_trader_crypto_history_id'), 'balance_trader_crypto_history', ['id'], unique=False)
    op.create_index('ix_balance_trader_crypto_history_op_type', 'balance_trader_crypto_history', ['operation_type'], unique=False)
    op.create_index(op.f('ix_balance_trader_crypto_history_operation_type'), 'balance_trader_crypto_history', ['operation_type'], unique=False)
    op.create_table('balance_trader_fiat_history',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('trader_id', sa.Integer(), nullable=False),
    sa.Column('fiat_id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=True),
    sa.Column('operation_type', sa.String(length=50), nullable=False),
    sa.Column('network', sa.String(length=50), nullable=True),
    sa.Column('balance_change', sa.DECIMAL(precision=20, scale=2), nullable=False),
    sa.Column('new_balance', sa.DECIMAL(precision=20, scale=2), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['fiat_id'], ['fiat_currencies.id'], ),
    sa.ForeignKeyConstraint(['order_id'], ['order_history.id'], ),
    sa.ForeignKeyConstraint(['trader_id'], ['traders.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_balance_trader_fiat_history_id'), 'balance_trader_fiat_history', ['id'], unique=False)
    op.create_index('ix_balance_trader_fiat_history_op_type', 'balance_trader_fiat_history', ['operation_type'], unique=False)
    op.create_index(op.f('ix_balance_trader_fiat_history_operation_type'), 'balance_trader_fiat_history', ['operation_type'], unique=False)
    op.create_table('uploaded_documents',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('order_id', sa.Integer(), nullable=False),
    sa.Column('actor_id', sa.Integer(), nullable=True),
    sa.Column('file_url', sa.String(length=512), nullable=False),
    sa.Column('doc_type', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['actor_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['order_id'], ['order_history.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_uploaded_documents_id'), 'uploaded_documents', ['id'], unique=False)
    op.drop_index('ix_balans_history_traders_id', table_name='balans_history_traders')
    op.drop_table('balans_history_traders')
    op.drop_index('ix_avalible_requests_id', table_name='avalible_requests')
    op.drop_table('avalible_requests')
    op.drop_index('ix_work_balans_history_id', table_name='work_balans_history')
    op.drop_table('work_balans_history')
    op.add_column('admins', sa.Column('user_id', sa.Integer(), nullable=False))
    op.add_column('admins', sa.Column('username', sa.String(length=100), nullable=False))
    op.add_column('admins', sa.Column('can_manage_other_admins', sa.Boolean(), nullable=False))
    op.add_column('admins', sa.Column('can_manage_supports', sa.Boolean(), nullable=False))
    op.add_column('admins', sa.Column('can_manage_merchants', sa.Boolean(), nullable=False))
    op.add_column('admins', sa.Column('can_manage_traders', sa.Boolean(), nullable=False))
    op.add_column('admins', sa.Column('can_edit_system_settings', sa.Boolean(), nullable=False))
    op.add_column('admins', sa.Column('can_edit_limits', sa.Boolean(), nullable=False))
    op.add_column('admins', sa.Column('can_view_full_logs', sa.Boolean(), nullable=False))
    op.add_column('admins', sa.Column('can_handle_appeals', sa.Boolean(), nullable=False))
    op.drop_constraint('admins_email_key', 'admins', type_='unique')
    op.drop_index('ix_admins_id', table_name='admins')
    op.create_unique_constraint(None, 'admins', ['user_id'])
    op.create_foreign_key(None, 'admins', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('admins', 'super_admin')
    op.drop_column('admins', 'email')
    op.drop_column('admins', 'password_hash')
    op.drop_column('admins', 'updated_at')
    op.drop_column('admins', 'two_fa_code')
    op.drop_column('admins', 'access')
    op.drop_column('admins', 'created_at')
    op.add_column('avalible_bank_methods', sa.Column('fiat_id', sa.Integer(), nullable=False))
    op.alter_column('avalible_bank_methods', 'access',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.create_index('ix_avalible_bank_method_lookup', 'avalible_bank_methods', ['fiat_id', 'bank_id', 'method_id'], unique=True)
    op.drop_constraint('avalible_bank_methods_bank_id_fkey', 'avalible_bank_methods', type_='foreignkey')
    op.drop_constraint('avalible_bank_methods_method_id_fkey', 'avalible_bank_methods', type_='foreignkey')
    op.create_foreign_key(None, 'avalible_bank_methods', 'fiat_currencies', ['fiat_id'], ['id'])
    op.create_foreign_key(None, 'avalible_bank_methods', 'payment_methods', ['method_id'], ['id'])
    op.create_foreign_key(None, 'avalible_bank_methods', 'banks', ['bank_id'], ['id'])
    op.add_column('balance_stores', sa.Column('crypto_currency_id', sa.Integer(), nullable=False))
    op.alter_column('balance_stores', 'balance',
               existing_type=sa.NUMERIC(precision=20, scale=2),
               type_=sa.DECIMAL(precision=20, scale=8),
               existing_nullable=False)
    op.alter_column('balance_stores', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.drop_constraint('balance_stores_currency_id_fkey', 'balance_stores', type_='foreignkey')
    op.create_foreign_key(None, 'balance_stores', 'crypto_currencies', ['crypto_currency_id'], ['id'])
    op.drop_column('balance_stores', 'currency_id')
    op.add_column('balance_traders', sa.Column('fiat_currency_id', sa.Integer(), nullable=False))
    op.add_column('balance_traders', sa.Column('updated_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.drop_constraint('balance_traders_currency_id_fkey', 'balance_traders', type_='foreignkey')
    op.create_foreign_key(None, 'balance_traders', 'fiat_currencies', ['fiat_currency_id'], ['id'])
    op.drop_column('balance_traders', 'currency_id')
    op.add_column('banks', sa.Column('fiat_id', sa.Integer(), nullable=False))
    op.alter_column('banks', 'access',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.create_foreign_key(None, 'banks', 'fiat_currencies', ['fiat_id'], ['id'])
    op.alter_column('exchange_rates', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.add_column('fiat_currencies', sa.Column('country_id', sa.Integer(), nullable=False))
    op.add_column('fiat_currencies', sa.Column('currency_code', sa.String(length=3), nullable=False))
    op.add_column('fiat_currencies', sa.Column('public_name', sa.String(length=255), nullable=True))
    op.alter_column('fiat_currencies', 'access',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.create_unique_constraint(None, 'fiat_currencies', ['currency_code'])
    op.create_foreign_key(None, 'fiat_currencies', 'countries', ['country_id'], ['id'])
    op.add_column('merchant_stores', sa.Column('crypto_currency_id', sa.Integer(), nullable=False))
    op.add_column('merchant_stores', sa.Column('fiat_currency_id', sa.Integer(), nullable=False))
    op.add_column('merchant_stores', sa.Column('lower_limit', sa.DECIMAL(precision=20, scale=2), nullable=False))
    op.add_column('merchant_stores', sa.Column('upper_limit', sa.DECIMAL(precision=20, scale=2), nullable=False))
    op.add_column('merchant_stores', sa.Column('pay_in_enabled', sa.Boolean(), nullable=False))
    op.add_column('merchant_stores', sa.Column('pay_out_enabled', sa.Boolean(), nullable=False))
    op.add_column('merchant_stores', sa.Column('callback_url', sa.String(length=512), nullable=True))
    op.add_column('merchant_stores', sa.Column('secret_key', sa.String(length=255), nullable=True))
    op.add_column('merchant_stores', sa.Column('gateway_require_customer_id_param', sa.Boolean(), nullable=False))
    op.add_column('merchant_stores', sa.Column('gateway_require_amount_param', sa.Boolean(), nullable=False))
    op.alter_column('merchant_stores', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('merchant_stores', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('merchant_stores', 'trafic_access',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('merchant_stores', 'access',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.drop_index('ix_merchant_stores_id', table_name='merchant_stores')
    op.create_unique_constraint(None, 'merchant_stores', ['public_api_key'])
    op.drop_constraint('merchant_stores_currency_id_fkey', 'merchant_stores', type_='foreignkey')
    op.create_foreign_key(None, 'merchant_stores', 'crypto_currencies', ['crypto_currency_id'], ['id'])
    op.create_foreign_key(None, 'merchant_stores', 'fiat_currencies', ['fiat_currency_id'], ['id'])
    op.drop_column('merchant_stores', 'currency_id')
    op.drop_column('merchant_stores', 'balance')
    op.add_column('merchants', sa.Column('user_id', sa.Integer(), nullable=False))
    op.add_column('merchants', sa.Column('first_name', sa.String(length=100), nullable=True))
    op.add_column('merchants', sa.Column('last_name', sa.String(length=100), nullable=True))
    op.add_column('merchants', sa.Column('avatar_url', sa.String(length=255), nullable=True))
    op.add_column('merchants', sa.Column('verification_level', sa.String(length=50), nullable=True))
    op.drop_index('ix_merchants_id', table_name='merchants')
    op.drop_constraint('merchants_email_key', 'merchants', type_='unique')
    op.create_unique_constraint(None, 'merchants', ['user_id'])
    op.create_foreign_key(None, 'merchants', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('merchants', 'email')
    op.drop_column('merchants', 'password_hash')
    op.drop_column('merchants', 'updated_at')
    op.drop_column('merchants', 'access')
    op.drop_column('merchants', 'created_at')
    op.add_column('order_history', sa.Column('incoming_order_id', sa.Integer(), nullable=True))
    op.add_column('order_history', sa.Column('requisite_id', sa.Integer(), nullable=False))
    op.add_column('order_history', sa.Column('gateway_id', sa.Integer(), nullable=True))
    op.add_column('order_history', sa.Column('crypto_currency_id', sa.Integer(), nullable=False))
    op.add_column('order_history', sa.Column('amount_crypto', sa.DECIMAL(precision=20, scale=8), nullable=True))
    op.add_column('order_history', sa.Column('amount_fiat', sa.DECIMAL(precision=20, scale=2), nullable=True))
    op.add_column('order_history', sa.Column('store_commission', sa.DECIMAL(precision=20, scale=2), nullable=False))
    op.add_column('order_history', sa.Column('client_id', sa.String(length=255), nullable=True))
    op.add_column('order_history', sa.Column('customer_ip', sa.String(length=100), nullable=True))
    op.add_column('order_history', sa.Column('payment_details_submitted', sa.Boolean(), nullable=False))
    op.add_column('order_history', sa.Column('receipt_url', sa.String(length=512), nullable=True))
    op.add_column('order_history', sa.Column('trader_receipt_url', sa.String(length=512), nullable=True))
    op.add_column('order_history', sa.Column('cancellation_reason', sa.Text(), nullable=True))
    op.alter_column('order_history', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('order_history', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('order_history', 'customer_id',
               existing_type=sa.INTEGER(),
               type_=sa.String(length=255),
               nullable=True)
    op.create_index('ix_order_history_client_id', 'order_history', ['client_id'], unique=False)
    op.create_index('ix_order_history_created_at', 'order_history', ['created_at'], unique=False)
    op.create_index(op.f('ix_order_history_hash_id'), 'order_history', ['hash_id'], unique=True)
    op.create_index(op.f('ix_order_history_merchant_id'), 'order_history', ['merchant_id'], unique=False)
    op.create_index(op.f('ix_order_history_order_type'), 'order_history', ['order_type'], unique=False)
    op.create_index(op.f('ix_order_history_status'), 'order_history', ['status'], unique=False)
    op.create_index(op.f('ix_order_history_store_id'), 'order_history', ['store_id'], unique=False)
    op.create_index(op.f('ix_order_history_trader_id'), 'order_history', ['trader_id'], unique=False)
    op.create_unique_constraint(None, 'order_history', ['incoming_order_id'])
    op.drop_constraint('order_history_merchant_id_fkey', 'order_history', type_='foreignkey')
    op.drop_constraint('order_history_method_id_fkey', 'order_history', type_='foreignkey')
    op.drop_constraint('order_history_trader_id_fkey', 'order_history', type_='foreignkey')
    op.drop_constraint('order_history_store_id_fkey', 'order_history', type_='foreignkey')
    op.drop_constraint('order_history_fiat_id_fkey', 'order_history', type_='foreignkey')
    op.drop_constraint('order_history_requeset_id_fkey', 'order_history', type_='foreignkey')
    op.drop_constraint('order_history_currency_id_fkey', 'order_history', type_='foreignkey')
    op.drop_constraint('order_history_bank_id_fkey', 'order_history', type_='foreignkey')
    op.create_foreign_key(None, 'order_history', 'fiat_currencies', ['fiat_id'], ['id'])
    op.create_foreign_key(None, 'order_history', 'store_gateways', ['gateway_id'], ['id'])
    op.create_foreign_key(None, 'order_history', 'crypto_currencies', ['crypto_currency_id'], ['id'])
    op.create_foreign_key(None, 'order_history', 'incoming_orders', ['incoming_order_id'], ['id'])
    op.create_foreign_key(None, 'order_history', 'banks', ['bank_id'], ['id'])
    op.create_foreign_key(None, 'order_history', 'req_traders', ['requisite_id'], ['id'])
    op.create_foreign_key(None, 'order_history', 'traders', ['trader_id'], ['id'])
    op.create_foreign_key(None, 'order_history', 'merchants', ['merchant_id'], ['id'])
    op.create_foreign_key(None, 'order_history', 'payment_methods', ['method_id'], ['id'])
    op.create_foreign_key(None, 'order_history', 'merchant_stores', ['store_id'], ['id'])
    op.drop_column('order_history', 'currency_id')
    op.drop_column('order_history', 'requeset_id')
    op.drop_column('order_history', 'merchant_commission')
    op.add_column('payment_methods', sa.Column('fiat_id', sa.Integer(), nullable=False))
    op.alter_column('payment_methods', 'access',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.create_foreign_key(None, 'payment_methods', 'fiat_currencies', ['fiat_id'], ['id'])
    op.add_column('req_traders', sa.Column('fiat_id', sa.Integer(), nullable=False))
    op.add_column('req_traders', sa.Column('owner_of_requisites_id', sa.Integer(), nullable=False))
    op.add_column('req_traders', sa.Column('last_used_at', sa.TIMESTAMP(timezone=True), nullable=True))
    op.add_column('req_traders', sa.Column('distribution_weight', sa.DECIMAL(precision=10, scale=2), nullable=False))
    op.add_column('req_traders', sa.Column('is_excluded_from_distribution', sa.Boolean(), nullable=False))
    op.alter_column('req_traders', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.alter_column('req_traders', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('req_traders', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.create_index('ix_req_trader_status', 'req_traders', ['status'], unique=False)
    op.create_index(op.f('ix_req_traders_status'), 'req_traders', ['status'], unique=False)
    op.create_index(op.f('ix_req_traders_trader_id'), 'req_traders', ['trader_id'], unique=False)
    op.drop_constraint('req_traders_bank_id_fkey', 'req_traders', type_='foreignkey')
    op.drop_constraint('req_traders_method_id_fkey', 'req_traders', type_='foreignkey')
    op.create_foreign_key(None, 'req_traders', 'banks', ['bank_id'], ['id'])
    op.create_foreign_key(None, 'req_traders', 'payment_methods', ['method_id'], ['id'])
    op.create_foreign_key(None, 'req_traders', 'fiat_currencies', ['fiat_id'], ['id'])
    op.create_foreign_key(None, 'req_traders', 'owner_of_requisites', ['owner_of_requisites_id'], ['id'])
    op.drop_column('req_traders', 'fio')
    op.drop_column('req_traders', 'total_limit')
    op.drop_column('req_traders', 'upper_limit')
    op.drop_column('req_traders', 'lower_limit')
    op.add_column('store_addresses', sa.Column('fiat_currency_id', sa.Integer(), nullable=False))
    op.alter_column('store_addresses', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('store_addresses', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.create_index('ix_store_address_status', 'store_addresses', ['status'], unique=False)
    op.create_index(op.f('ix_store_addresses_status'), 'store_addresses', ['status'], unique=False)
    op.drop_constraint('store_addresses_currency_id_fkey', 'store_addresses', type_='foreignkey')
    op.create_foreign_key(None, 'store_addresses', 'fiat_currencies', ['fiat_currency_id'], ['id'])
    op.drop_column('store_addresses', 'currency_id')
    op.add_column('supports', sa.Column('user_id', sa.Integer(), nullable=False))
    op.add_column('supports', sa.Column('username', sa.String(length=100), nullable=False))
    op.add_column('supports', sa.Column('can_edit_trader_settings', sa.Boolean(), nullable=False))
    op.add_column('supports', sa.Column('can_manage_orders', sa.Boolean(), nullable=False))
    op.add_column('supports', sa.Column('can_view_orders', sa.Boolean(), nullable=False))
    op.add_column('supports', sa.Column('can_handle_appeals', sa.Boolean(), nullable=False))
    op.add_column('supports', sa.Column('can_view_sensitive_data', sa.Boolean(), nullable=False))
    op.drop_index('ix_supports_id', table_name='supports')
    op.drop_constraint('supports_email_key', 'supports', type_='unique')
    op.create_unique_constraint(None, 'supports', ['user_id'])
    op.create_foreign_key(None, 'supports', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_column('supports', 'email')
    op.drop_column('supports', 'password_hash')
    op.drop_column('supports', 'updated_at')
    op.drop_column('supports', 'two_fa_code')
    op.drop_column('supports', 'access')
    op.drop_column('supports', 'access_to')
    op.drop_column('supports', 'created_at')
    op.alter_column('time_zones', 'access',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('time_zones', 'regions',
               existing_type=sa.VARCHAR(),
               type_=sa.Text(),
               existing_nullable=True)
    op.create_unique_constraint(None, 'time_zones', ['name'])
    op.add_column('trader_addresses', sa.Column('fiat_currency_id', sa.Integer(), nullable=False))
    op.alter_column('trader_addresses', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('trader_addresses', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.create_index('ix_trader_address_status', 'trader_addresses', ['status'], unique=False)
    op.create_index(op.f('ix_trader_addresses_status'), 'trader_addresses', ['status'], unique=False)
    op.drop_constraint('trader_addresses_currency_id_fkey', 'trader_addresses', type_='foreignkey')
    op.create_foreign_key(None, 'trader_addresses', 'fiat_currencies', ['fiat_currency_id'], ['id'])
    op.drop_column('trader_addresses', 'currency_id')
    op.add_column('traders', sa.Column('user_id', sa.Integer(), nullable=False))
    op.add_column('traders', sa.Column('first_name', sa.String(length=100), nullable=True))
    op.add_column('traders', sa.Column('last_name', sa.String(length=100), nullable=True))
    op.add_column('traders', sa.Column('preferred_fiat_currency_id', sa.Integer(), nullable=True))
    op.add_column('traders', sa.Column('crypto_currency_id', sa.Integer(), nullable=True))
    op.add_column('traders', sa.Column('base_pay_in_limit', sa.DECIMAL(precision=20, scale=2), nullable=False))
    op.add_column('traders', sa.Column('base_pay_out_limit', sa.DECIMAL(precision=20, scale=2), nullable=False))
    op.alter_column('traders', 'pay_in',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('traders', 'pay_out',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('traders', 'in_work',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('traders', 'time_zone_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.drop_index('ix_traders_id', table_name='traders')
    op.drop_constraint('traders_email_key', 'traders', type_='unique')
    op.create_index('ix_trader_priority_lookup', 'traders', ['in_work', 'trafic_priority'], unique=False)
    op.create_index(op.f('ix_traders_in_work'), 'traders', ['in_work'], unique=False)
    op.create_index(op.f('ix_traders_trafic_priority'), 'traders', ['trafic_priority'], unique=False)
    op.create_unique_constraint(None, 'traders', ['user_id'])
    op.drop_constraint('traders_time_zone_id_fkey', 'traders', type_='foreignkey')
    op.drop_constraint('traders_fiat_id_fkey', 'traders', type_='foreignkey')
    op.drop_constraint('traders_currency_id_fkey', 'traders', type_='foreignkey')
    op.create_foreign_key(None, 'traders', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'traders', 'fiat_currencies', ['preferred_fiat_currency_id'], ['id'])
    op.create_foreign_key(None, 'traders', 'crypto_currencies', ['crypto_currency_id'], ['id'])
    op.create_foreign_key(None, 'traders', 'time_zones', ['time_zone_id'], ['id'])
    op.drop_column('traders', 'currency_id')
    op.drop_column('traders', 'email')
    op.drop_column('traders', 'password_hash')
    op.drop_column('traders', 'updated_at')
    op.drop_column('traders', 'access')
    op.drop_column('traders', 'trafic_access')
    op.drop_column('traders', 'created_at')
    op.drop_column('traders', 'fiat_id')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('traders', sa.Column('fiat_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('traders', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('traders', sa.Column('trafic_access', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('traders', sa.Column('access', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('traders', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('traders', sa.Column('password_hash', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('traders', sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('traders', sa.Column('currency_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'traders', type_='foreignkey')
    op.drop_constraint(None, 'traders', type_='foreignkey')
    op.drop_constraint(None, 'traders', type_='foreignkey')
    op.drop_constraint(None, 'traders', type_='foreignkey')
    op.create_foreign_key('traders_currency_id_fkey', 'traders', 'fiat_currencies', ['currency_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('traders_fiat_id_fkey', 'traders', 'fiat_currencies', ['fiat_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('traders_time_zone_id_fkey', 'traders', 'time_zones', ['time_zone_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'traders', type_='unique')
    op.drop_index(op.f('ix_traders_trafic_priority'), table_name='traders')
    op.drop_index(op.f('ix_traders_in_work'), table_name='traders')
    op.drop_index('ix_trader_priority_lookup', table_name='traders')
    op.create_unique_constraint('traders_email_key', 'traders', ['email'])
    op.create_index('ix_traders_id', 'traders', ['id'], unique=False)
    op.alter_column('traders', 'time_zone_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('traders', 'in_work',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('traders', 'pay_out',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('traders', 'pay_in',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.drop_column('traders', 'base_pay_out_limit')
    op.drop_column('traders', 'base_pay_in_limit')
    op.drop_column('traders', 'crypto_currency_id')
    op.drop_column('traders', 'preferred_fiat_currency_id')
    op.drop_column('traders', 'last_name')
    op.drop_column('traders', 'first_name')
    op.drop_column('traders', 'user_id')
    op.add_column('trader_addresses', sa.Column('currency_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'trader_addresses', type_='foreignkey')
    op.create_foreign_key('trader_addresses_currency_id_fkey', 'trader_addresses', 'fiat_currencies', ['currency_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_trader_addresses_status'), table_name='trader_addresses')
    op.drop_index('ix_trader_address_status', table_name='trader_addresses')
    op.alter_column('trader_addresses', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('trader_addresses', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.drop_column('trader_addresses', 'fiat_currency_id')
    op.drop_constraint(None, 'time_zones', type_='unique')
    op.alter_column('time_zones', 'regions',
               existing_type=sa.Text(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.alter_column('time_zones', 'access',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.add_column('supports', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('supports', sa.Column('access_to', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('supports', sa.Column('access', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('supports', sa.Column('two_fa_code', sa.VARCHAR(length=32), autoincrement=False, nullable=True))
    op.add_column('supports', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('supports', sa.Column('password_hash', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('supports', sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'supports', type_='foreignkey')
    op.drop_constraint(None, 'supports', type_='unique')
    op.create_unique_constraint('supports_email_key', 'supports', ['email'])
    op.create_index('ix_supports_id', 'supports', ['id'], unique=False)
    op.drop_column('supports', 'can_view_sensitive_data')
    op.drop_column('supports', 'can_handle_appeals')
    op.drop_column('supports', 'can_view_orders')
    op.drop_column('supports', 'can_manage_orders')
    op.drop_column('supports', 'can_edit_trader_settings')
    op.drop_column('supports', 'username')
    op.drop_column('supports', 'user_id')
    op.add_column('store_addresses', sa.Column('currency_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'store_addresses', type_='foreignkey')
    op.create_foreign_key('store_addresses_currency_id_fkey', 'store_addresses', 'fiat_currencies', ['currency_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_store_addresses_status'), table_name='store_addresses')
    op.drop_index('ix_store_address_status', table_name='store_addresses')
    op.alter_column('store_addresses', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('store_addresses', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.drop_column('store_addresses', 'fiat_currency_id')
    op.add_column('req_traders', sa.Column('lower_limit', sa.NUMERIC(precision=20, scale=2), autoincrement=False, nullable=False))
    op.add_column('req_traders', sa.Column('upper_limit', sa.NUMERIC(precision=20, scale=2), autoincrement=False, nullable=False))
    op.add_column('req_traders', sa.Column('total_limit', sa.NUMERIC(precision=20, scale=2), autoincrement=False, nullable=False))
    op.add_column('req_traders', sa.Column('fio', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'req_traders', type_='foreignkey')
    op.drop_constraint(None, 'req_traders', type_='foreignkey')
    op.drop_constraint(None, 'req_traders', type_='foreignkey')
    op.drop_constraint(None, 'req_traders', type_='foreignkey')
    op.create_foreign_key('req_traders_method_id_fkey', 'req_traders', 'payment_methods', ['method_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('req_traders_bank_id_fkey', 'req_traders', 'banks', ['bank_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_req_traders_trader_id'), table_name='req_traders')
    op.drop_index(op.f('ix_req_traders_status'), table_name='req_traders')
    op.drop_index('ix_req_trader_status', table_name='req_traders')
    op.alter_column('req_traders', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('req_traders', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('req_traders', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.drop_column('req_traders', 'is_excluded_from_distribution')
    op.drop_column('req_traders', 'distribution_weight')
    op.drop_column('req_traders', 'last_used_at')
    op.drop_column('req_traders', 'owner_of_requisites_id')
    op.drop_column('req_traders', 'fiat_id')
    op.drop_constraint(None, 'payment_methods', type_='foreignkey')
    op.alter_column('payment_methods', 'access',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.drop_column('payment_methods', 'fiat_id')
    op.add_column('order_history', sa.Column('merchant_commission', sa.NUMERIC(precision=20, scale=2), autoincrement=False, nullable=False))
    op.add_column('order_history', sa.Column('requeset_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.add_column('order_history', sa.Column('currency_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'order_history', type_='foreignkey')
    op.drop_constraint(None, 'order_history', type_='foreignkey')
    op.drop_constraint(None, 'order_history', type_='foreignkey')
    op.drop_constraint(None, 'order_history', type_='foreignkey')
    op.drop_constraint(None, 'order_history', type_='foreignkey')
    op.drop_constraint(None, 'order_history', type_='foreignkey')
    op.drop_constraint(None, 'order_history', type_='foreignkey')
    op.drop_constraint(None, 'order_history', type_='foreignkey')
    op.drop_constraint(None, 'order_history', type_='foreignkey')
    op.drop_constraint(None, 'order_history', type_='foreignkey')
    op.create_foreign_key('order_history_bank_id_fkey', 'order_history', 'banks', ['bank_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('order_history_currency_id_fkey', 'order_history', 'fiat_currencies', ['currency_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('order_history_requeset_id_fkey', 'order_history', 'req_traders', ['requeset_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('order_history_fiat_id_fkey', 'order_history', 'fiat_currencies', ['fiat_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('order_history_store_id_fkey', 'order_history', 'merchant_stores', ['store_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('order_history_trader_id_fkey', 'order_history', 'traders', ['trader_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('order_history_method_id_fkey', 'order_history', 'payment_methods', ['method_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('order_history_merchant_id_fkey', 'order_history', 'merchants', ['merchant_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'order_history', type_='unique')
    op.drop_index(op.f('ix_order_history_trader_id'), table_name='order_history')
    op.drop_index(op.f('ix_order_history_store_id'), table_name='order_history')
    op.drop_index(op.f('ix_order_history_status'), table_name='order_history')
    op.drop_index(op.f('ix_order_history_order_type'), table_name='order_history')
    op.drop_index(op.f('ix_order_history_merchant_id'), table_name='order_history')
    op.drop_index(op.f('ix_order_history_hash_id'), table_name='order_history')
    op.drop_index('ix_order_history_created_at', table_name='order_history')
    op.drop_index('ix_order_history_client_id', table_name='order_history')
    op.alter_column('order_history', 'customer_id',
               existing_type=sa.String(length=255),
               type_=sa.INTEGER(),
               nullable=False)
    op.alter_column('order_history', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('order_history', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.drop_column('order_history', 'cancellation_reason')
    op.drop_column('order_history', 'trader_receipt_url')
    op.drop_column('order_history', 'receipt_url')
    op.drop_column('order_history', 'payment_details_submitted')
    op.drop_column('order_history', 'customer_ip')
    op.drop_column('order_history', 'client_id')
    op.drop_column('order_history', 'store_commission')
    op.drop_column('order_history', 'amount_fiat')
    op.drop_column('order_history', 'amount_crypto')
    op.drop_column('order_history', 'crypto_currency_id')
    op.drop_column('order_history', 'gateway_id')
    op.drop_column('order_history', 'requisite_id')
    op.drop_column('order_history', 'incoming_order_id')
    op.add_column('merchants', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('merchants', sa.Column('access', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('merchants', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('merchants', sa.Column('password_hash', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('merchants', sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'merchants', type_='foreignkey')
    op.drop_constraint(None, 'merchants', type_='unique')
    op.create_unique_constraint('merchants_email_key', 'merchants', ['email'])
    op.create_index('ix_merchants_id', 'merchants', ['id'], unique=False)
    op.drop_column('merchants', 'verification_level')
    op.drop_column('merchants', 'avatar_url')
    op.drop_column('merchants', 'last_name')
    op.drop_column('merchants', 'first_name')
    op.drop_column('merchants', 'user_id')
    op.add_column('merchant_stores', sa.Column('balance', sa.NUMERIC(precision=20, scale=2), autoincrement=False, nullable=False))
    op.add_column('merchant_stores', sa.Column('currency_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'merchant_stores', type_='foreignkey')
    op.drop_constraint(None, 'merchant_stores', type_='foreignkey')
    op.create_foreign_key('merchant_stores_currency_id_fkey', 'merchant_stores', 'fiat_currencies', ['currency_id'], ['id'], ondelete='CASCADE')
    op.drop_constraint(None, 'merchant_stores', type_='unique')
    op.create_index('ix_merchant_stores_id', 'merchant_stores', ['id'], unique=False)
    op.alter_column('merchant_stores', 'access',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('merchant_stores', 'trafic_access',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('merchant_stores', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('merchant_stores', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.drop_column('merchant_stores', 'gateway_require_amount_param')
    op.drop_column('merchant_stores', 'gateway_require_customer_id_param')
    op.drop_column('merchant_stores', 'secret_key')
    op.drop_column('merchant_stores', 'callback_url')
    op.drop_column('merchant_stores', 'pay_out_enabled')
    op.drop_column('merchant_stores', 'pay_in_enabled')
    op.drop_column('merchant_stores', 'upper_limit')
    op.drop_column('merchant_stores', 'lower_limit')
    op.drop_column('merchant_stores', 'fiat_currency_id')
    op.drop_column('merchant_stores', 'crypto_currency_id')
    op.drop_constraint(None, 'fiat_currencies', type_='foreignkey')
    op.drop_constraint(None, 'fiat_currencies', type_='unique')
    op.alter_column('fiat_currencies', 'access',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.drop_column('fiat_currencies', 'public_name')
    op.drop_column('fiat_currencies', 'currency_code')
    op.drop_column('fiat_currencies', 'country_id')
    op.alter_column('exchange_rates', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.drop_constraint(None, 'banks', type_='foreignkey')
    op.alter_column('banks', 'access',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.drop_column('banks', 'fiat_id')
    op.add_column('balance_traders', sa.Column('currency_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'balance_traders', type_='foreignkey')
    op.create_foreign_key('balance_traders_currency_id_fkey', 'balance_traders', 'fiat_currencies', ['currency_id'], ['id'], ondelete='CASCADE')
    op.drop_column('balance_traders', 'updated_at')
    op.drop_column('balance_traders', 'fiat_currency_id')
    op.add_column('balance_stores', sa.Column('currency_id', sa.INTEGER(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'balance_stores', type_='foreignkey')
    op.create_foreign_key('balance_stores_currency_id_fkey', 'balance_stores', 'fiat_currencies', ['currency_id'], ['id'], ondelete='CASCADE')
    op.alter_column('balance_stores', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('balance_stores', 'balance',
               existing_type=sa.DECIMAL(precision=20, scale=8),
               type_=sa.NUMERIC(precision=20, scale=2),
               existing_nullable=False)
    op.drop_column('balance_stores', 'crypto_currency_id')
    op.drop_constraint(None, 'avalible_bank_methods', type_='foreignkey')
    op.drop_constraint(None, 'avalible_bank_methods', type_='foreignkey')
    op.drop_constraint(None, 'avalible_bank_methods', type_='foreignkey')
    op.create_foreign_key('avalible_bank_methods_method_id_fkey', 'avalible_bank_methods', 'payment_methods', ['method_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key('avalible_bank_methods_bank_id_fkey', 'avalible_bank_methods', 'banks', ['bank_id'], ['id'], ondelete='CASCADE')
    op.drop_index('ix_avalible_bank_method_lookup', table_name='avalible_bank_methods')
    op.alter_column('avalible_bank_methods', 'access',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.drop_column('avalible_bank_methods', 'fiat_id')
    op.add_column('admins', sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('admins', sa.Column('access', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.add_column('admins', sa.Column('two_fa_code', sa.VARCHAR(length=32), autoincrement=False, nullable=True))
    op.add_column('admins', sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('admins', sa.Column('password_hash', sa.TEXT(), autoincrement=False, nullable=False))
    op.add_column('admins', sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.add_column('admins', sa.Column('super_admin', sa.BOOLEAN(), autoincrement=False, nullable=True))
    op.drop_constraint(None, 'admins', type_='foreignkey')
    op.drop_constraint(None, 'admins', type_='unique')
    op.create_index('ix_admins_id', 'admins', ['id'], unique=False)
    op.create_unique_constraint('admins_email_key', 'admins', ['email'])
    op.drop_column('admins', 'can_handle_appeals')
    op.drop_column('admins', 'can_view_full_logs')
    op.drop_column('admins', 'can_edit_limits')
    op.drop_column('admins', 'can_edit_system_settings')
    op.drop_column('admins', 'can_manage_traders')
    op.drop_column('admins', 'can_manage_merchants')
    op.drop_column('admins', 'can_manage_supports')
    op.drop_column('admins', 'can_manage_other_admins')
    op.drop_column('admins', 'username')
    op.drop_column('admins', 'user_id')
    op.create_table('work_balans_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('trader_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('fiat_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('currency_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('exchange_rate', sa.NUMERIC(precision=20, scale=8), autoincrement=False, nullable=False),
    sa.Column('operation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('amount_currency', sa.NUMERIC(precision=20, scale=8), autoincrement=False, nullable=False),
    sa.Column('amount_fiat', sa.NUMERIC(precision=20, scale=2), autoincrement=False, nullable=False),
    sa.Column('commission', sa.NUMERIC(precision=20, scale=2), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['currency_id'], ['fiat_currencies.id'], name='work_balans_history_currency_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['fiat_id'], ['fiat_currencies.id'], name='work_balans_history_fiat_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['trader_id'], ['traders.id'], name='work_balans_history_trader_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='work_balans_history_pkey')
    )
    op.create_index('ix_work_balans_history_id', 'work_balans_history', ['id'], unique=False)
    op.create_table('avalible_requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('request_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('bank_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('method_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('upper_limit', sa.NUMERIC(precision=20, scale=2), autoincrement=False, nullable=False),
    sa.Column('lower_limit', sa.NUMERIC(precision=20, scale=2), autoincrement=False, nullable=False),
    sa.Column('total_limit', sa.NUMERIC(precision=20, scale=2), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['bank_id'], ['banks.id'], name='avalible_requests_bank_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['method_id'], ['payment_methods.id'], name='avalible_requests_method_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['request_id'], ['req_traders.id'], name='avalible_requests_request_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='avalible_requests_pkey')
    )
    op.create_index('ix_avalible_requests_id', 'avalible_requests', ['id'], unique=False)
    op.create_table('balans_history_traders',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('trader_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('fiat_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('currency_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('operation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('network', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('commission', sa.NUMERIC(precision=20, scale=2), autoincrement=False, nullable=False),
    sa.Column('amount', sa.NUMERIC(precision=20, scale=2), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['currency_id'], ['fiat_currencies.id'], name='balans_history_traders_currency_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['fiat_id'], ['fiat_currencies.id'], name='balans_history_traders_fiat_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['trader_id'], ['traders.id'], name='balans_history_traders_trader_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='balans_history_traders_pkey')
    )
    op.create_index('ix_balans_history_traders_id', 'balans_history_traders', ['id'], unique=False)
    op.drop_index(op.f('ix_uploaded_documents_id'), table_name='uploaded_documents')
    op.drop_table('uploaded_documents')
    op.drop_index(op.f('ix_balance_trader_fiat_history_operation_type'), table_name='balance_trader_fiat_history')
    op.drop_index('ix_balance_trader_fiat_history_op_type', table_name='balance_trader_fiat_history')
    op.drop_index(op.f('ix_balance_trader_fiat_history_id'), table_name='balance_trader_fiat_history')
    op.drop_table('balance_trader_fiat_history')
    op.drop_index(op.f('ix_balance_trader_crypto_history_operation_type'), table_name='balance_trader_crypto_history')
    op.drop_index('ix_balance_trader_crypto_history_op_type', table_name='balance_trader_crypto_history')
    op.drop_index(op.f('ix_balance_trader_crypto_history_id'), table_name='balance_trader_crypto_history')
    op.drop_table('balance_trader_crypto_history')
    op.drop_index(op.f('ix_balance_store_history_operation_type'), table_name='balance_store_history')
    op.drop_index(op.f('ix_balance_store_history_id'), table_name='balance_store_history')
    op.drop_table('balance_store_history')
    op.drop_index('ix_incoming_orders_status_created', table_name='incoming_orders')
    op.drop_index(op.f('ix_incoming_orders_status'), table_name='incoming_orders')
    op.drop_index(op.f('ix_incoming_orders_order_type'), table_name='incoming_orders')
    op.drop_index('ix_incoming_orders_merchant_store', table_name='incoming_orders')
    op.drop_index(op.f('ix_incoming_orders_id'), table_name='incoming_orders')
    op.drop_index(op.f('ix_incoming_orders_client_id'), table_name='incoming_orders')
    op.drop_table('incoming_orders')
    op.drop_index(op.f('ix_store_commissions_id'), table_name='store_commissions')
    op.drop_table('store_commissions')
    op.drop_index(op.f('ix_full_requisites_settings_id'), table_name='full_requisites_settings')
    op.drop_table('full_requisites_settings')
    op.drop_index(op.f('ix_trader_commissions_id'), table_name='trader_commissions')
    op.drop_table('trader_commissions')
    op.drop_index(op.f('ix_audit_logs_timestamp'), table_name='audit_logs')
    op.drop_index('ix_audit_logs_target', table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_action'), table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index(op.f('ix_users_role_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.drop_table('roles')
    op.drop_table('requisite_distribution_settings')
    op.drop_index(op.f('ix_owner_of_requisites_id'), table_name='owner_of_requisites')
    op.drop_table('owner_of_requisites')
    op.drop_index(op.f('ix_crypto_currencies_id'), table_name='crypto_currencies')
    op.drop_table('crypto_currencies')
    op.drop_index(op.f('ix_countries_id'), table_name='countries')
    op.drop_table('countries')
    op.drop_index(op.f('ix_configuration_settings_key'), table_name='configuration_settings')
    op.drop_table('configuration_settings')
    # ### end Alembic commands ###
