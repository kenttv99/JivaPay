'use client';

import { useState } from "react";

type OrderStatus = "completed" | "processing" | "pending" | "canceled" | "disputed" | "failed";
type OrderType = "payin" | "payout";

interface Order {
  id: string;
  date: string;
  user: string;
  amount: string;
  amount_crypto: string;
  currency_crypto: string;
  type: OrderType;
  status: OrderStatus;
  trader: string | null;
  requisite: string | null;
  store_commission: string;
  trader_commission: string;
}

const recentOrders: Order[] = [
  {
    id: "ORD-2305001",
    date: "15.05.2023 12:30",
    user: "–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤",
    amount: "‚ÇΩ12,500",
    amount_crypto: "250",
    currency_crypto: "USDT",
    type: "payin",
    status: "completed",
    trader: "–ú–∞–∫—Å–∏–º –ò–≤–∞–Ω–æ–≤",
    requisite: "–°–±–µ—Ä–±–∞–Ω–∫ ****1234",
    store_commission: "‚ÇΩ625",
    trader_commission: "‚ÇΩ250"
  },
  {
    id: "ORD-2305002",
    date: "15.05.2023 13:45",
    user: "–ï–ª–µ–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞",
    amount: "‚ÇΩ8,300",
    amount_crypto: "166",
    currency_crypto: "USDT",
    type: "payin",
    status: "processing",
    trader: null,
    requisite: null,
    store_commission: "‚ÇΩ415",
    trader_commission: "‚ÇΩ166"
  },
  {
    id: "ORD-2305003",
    date: "15.05.2023 14:22",
    user: "–ê–ª–µ–∫—Å–µ–π –ò–≤–∞–Ω–æ–≤",
    amount: "‚ÇΩ15,750",
    amount_crypto: "315",
    currency_crypto: "USDT",
    type: "payout",
    status: "completed",
    trader: "–ê–Ω–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞",
    requisite: "–¢–∏–Ω—å–∫–æ—Ñ—Ñ ****5678",
    store_commission: "‚ÇΩ788",
    trader_commission: "‚ÇΩ315"
  },
  {
    id: "ORD-2305004",
    date: "15.05.2023 15:10",
    user: "–ú–∞—Ä–∏—è –ö—É–∑–Ω–µ—Ü–æ–≤–∞",
    amount: "‚ÇΩ5,200",
    amount_crypto: "104",
    currency_crypto: "USDT",
    type: "payin",
    status: "canceled",
    trader: null,
    requisite: null,
    store_commission: "‚ÇΩ0",
    trader_commission: "‚ÇΩ0"
  },
  {
    id: "ORD-2305005",
    date: "15.05.2023 16:05",
    user: "–î–º–∏—Ç—Ä–∏–π –°–º–∏—Ä–Ω–æ–≤",
    amount: "‚ÇΩ21,000",
    amount_crypto: "420",
    currency_crypto: "USDT",
    type: "payout",
    status: "processing",
    trader: null,
    requisite: null,
    store_commission: "‚ÇΩ1,050",
    trader_commission: "‚ÇΩ420"
  }
];

export const RecentOrders = () => {
  const [expandedOrder, setExpandedOrder] = useState<string | null>(null);

  const toggleOrderDetails = (orderId: string) => {
    setExpandedOrder(expandedOrder === orderId ? null : orderId);
  };

  return (
    <div className="overflow-hidden rounded-lg">
      <table className="w-full">
        <thead>
          <tr className="border-b border-[var(--jiva-border)]">
            <th className="px-4 py-3 text-left text-sm font-medium text-[var(--jiva-text-secondary)]">ID</th>
            <th className="px-4 py-3 text-left text-sm font-medium text-[var(--jiva-text-secondary)]">–î–∞—Ç–∞</th>
            <th className="px-4 py-3 text-left text-sm font-medium text-[var(--jiva-text-secondary)]">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</th>
            <th className="px-4 py-3 text-right text-sm font-medium text-[var(--jiva-text-secondary)]">–°—É–º–º–∞ –§–∏–∞—Ç</th>
            <th className="px-4 py-3 text-right text-sm font-medium text-[var(--jiva-text-secondary)]">–°—É–º–º–∞ –ö—Ä–∏–ø—Ç–æ</th>
            <th className="px-4 py-3 text-center text-sm font-medium text-[var(--jiva-text-secondary)]">–¢–∏–ø</th>
            <th className="px-4 py-3 text-center text-sm font-medium text-[var(--jiva-text-secondary)]">–°—Ç–∞—Ç—É—Å</th>
            <th className="px-4 py-3 text-center text-sm font-medium text-[var(--jiva-text-secondary)]">–¢—Ä–µ–π–¥–µ—Ä</th>
          </tr>
        </thead>
        <tbody>
          {recentOrders.map((order) => (
            <>
              <tr 
                key={order.id} 
                className="border-b border-[var(--jiva-border)] hover:bg-[var(--jiva-background)] cursor-pointer"
                onClick={() => toggleOrderDetails(order.id)}
              >
                <td className="px-4 py-3 text-[var(--jiva-primary)] font-medium">{order.id}</td>
                <td className="px-4 py-3 text-sm">{order.date}</td>
                <td className="px-4 py-3">{order.user}</td>
                <td className="px-4 py-3 text-right font-medium">{order.amount}</td>
                <td className="px-4 py-3 text-right">{order.amount_crypto} {order.currency_crypto}</td>
                <td className="px-4 py-3 text-center">
                  <OrderTypeBadge type={order.type} />
                </td>
                <td className="px-4 py-3 text-center">
                  <OrderStatusBadge status={order.status} />
                </td>
                <td className="px-4 py-3 text-center text-sm">
                  {order.trader || "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"}
                </td>
              </tr>
              {expandedOrder === order.id && (
                <tr>
                  <td colSpan={8} className="p-4 bg-[var(--jiva-background)] border-t border-[var(--jiva-border)]">
                    <div className="flex justify-between">
                      <div>
                        <p className="font-medium text-[var(--jiva-primary)] mb-2">–î–µ—Ç–∞–ª–∏ –æ—Ä–¥–µ—Ä–∞</p>
                        <div className="grid grid-cols-2 gap-4">
                          <div>
                            <p className="text-sm text-[var(--jiva-text-secondary)]">–¢—Ä–µ–π–¥–µ—Ä: {order.trader || "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"}</p>
                            <p className="text-sm text-[var(--jiva-text-secondary)]">–†–µ–∫–≤–∏–∑–∏—Ç: {order.requisite || "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"}</p>
                          </div>
                          <div>
                            <p className="text-sm text-[var(--jiva-text-secondary)]">–ö–æ–º–∏—Å—Å–∏—è –º–∞–≥–∞–∑–∏–Ω–∞: {order.store_commission}</p>
                            <p className="text-sm text-[var(--jiva-text-secondary)]">–ö–æ–º–∏—Å—Å–∏—è —Ç—Ä–µ–π–¥–µ—Ä–∞: {order.trader_commission}</p>
                          </div>
                        </div>
                      </div>
                      <div className="flex gap-2">
                        <button className="px-3 py-1 bg-[var(--jiva-background-paper)] hover:bg-[var(--jiva-background)] text-[var(--jiva-text)] rounded flex items-center gap-1">
                          <span>üëÅ</span>
                          <span>–î–µ—Ç–∞–ª–∏</span>
                        </button>
                        {order.status === "processing" && (
                          <button className="px-3 py-1 bg-[var(--jiva-primary)] hover:bg-[var(--jiva-primary-dark)] text-white rounded flex items-center gap-1">
                            <span>‚úì</span>
                            <span>–ü—Ä–∏–Ω—è—Ç—å</span>
                          </button>
                        )}
                      </div>
                    </div>
                  </td>
                </tr>
              )}
            </>
          ))}
        </tbody>
      </table>
    </div>
  );
};

const OrderStatusBadge = ({ status }: { status: OrderStatus }) => {
  const getStatusConfig = (status: OrderStatus) => {
    switch (status) {
      case 'completed':
        return { text: '–í—ã–ø–æ–ª–Ω–µ–Ω', className: 'bg-green-100 text-green-800' };
      case 'processing':
        return { text: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', className: 'bg-blue-100 text-blue-800' };
      case 'pending':
        return { text: '–û–∂–∏–¥–∞–Ω–∏–µ', className: 'bg-yellow-100 text-yellow-800' };
      case 'canceled':
        return { text: '–û—Ç–º–µ–Ω—ë–Ω', className: 'bg-gray-100 text-gray-800' };
      case 'disputed':
        return { text: '–°–ø–æ—Ä', className: 'bg-orange-100 text-orange-800' };
      case 'failed':
        return { text: '–û—à–∏–±–∫–∞', className: 'bg-red-100 text-red-800' };
      default:
        return { text: status, className: 'bg-gray-100 text-gray-800' };
    }
  };

  const config = getStatusConfig(status);
  
  return (
    <span className={`px-2 py-1 rounded-full text-xs font-medium ${config.className}`}>
      {config.text}
    </span>
  );
};

const OrderTypeBadge = ({ type }: { type: OrderType }) => {
  const getTypeConfig = (type: OrderType) => {
    switch (type) {
      case 'payin':
        return { text: '–í–≤–æ–¥', className: 'bg-green-100 text-green-800' };
      case 'payout':
        return { text: '–í—ã–≤–æ–¥', className: 'bg-purple-100 text-purple-800' };
      default:
        return { text: type, className: 'bg-gray-100 text-gray-800' };
    }
  };

  const config = getTypeConfig(type);
  
  return (
    <span className={`px-2 py-1 rounded-full text-xs font-medium ${config.className}`}>
      {config.text}
    </span>
  );
}; 